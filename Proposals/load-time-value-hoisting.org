#+TITLE: The treatment of LOAD-TIME-VALUE forms in Cleavir

** Introduction
The LOAD-TIME-VALUE special form has been added to Common Lisp in 1989 as a
replacement of the dysfunctional sharpsign comma reader macro.  The history
and semantics of the form are described in the following sections of the
Hyperspec:
- [[http://www.lispworks.com/documentation/HyperSpec/Body/s_ld_tim.htm]]
- [[http://www.lispworks.com/documentation/HyperSpec/Body/03_bbb.htm]]
- http://www.lispworks.com/documentation/HyperSpec/Issues/iss216_w.htm

For the remaining discussion, we will always assume the LOAD-TIME-VALUE
form is processed by the file compiler.  The other modes of processing ---
EVAL and COMPILE --- are trivially handled by evaluating the form directly
in a null lexical environment and replacing its use with the resulting
value.

LOAD-TIME-VALUE forms have some peculiarities that a compiler writer should
have in mind:
1. The value of the LOAD-TIME-VALUE form may be a compile-time constant,
   either because because the first argument is a literal, or because the
   first argument evaluates to a constant in the sense of CONSTANTP.
2. Even if the LOAD-TIME-VALUE form is not a compile-time constant, its
   value can be treated like an immutable constant whenever the second
   argument is the symbol T.
3. Even if the first argument of a LOAD-TIME-VALUE form does not evaluate
   to a constant, the compiler may be able to derive some knowledge about
   the resulting value, e.g. type information.
4. A LOAD-TIME-VALUE form may appear in dead code.  If, additionally, the
   form is free of side-effects, there is no need to store the form in the
   FASL at all.
5. Several LOAD-TIME-VALUE forms may be nested.  In this case, the standard
   mandates that each form is nevertheless only evaluated once and at
   load-time.
6. Accidental modification of literal constants is a dangerous source of
   bugs.  A good compiler should attempt to detect and report such code and
   consequently needs to know about the intricacies of LOAD-TIME-VALUE
   forms.
7. Several constant LOAD-TIME-VALUE forms that evaluate to the same
   constant datum may be coalesced. Some heuristic must be used to detect
   such equivalent forms, e.g. if they are the same under EQUAL.
8. According to the Hyperspec, "the order of evaluation [of load-time-value
   forms] with respect to the evaluation of top level forms in the file is
   implementation-dependent."

The following examples illustrate these issues:
#+BEGIN_SRC lisp
;; Obvious constants.
(load-time-value "abc")
(load-time-value #C(1 2))

;; A hidden constant.
(load-time-value (1+ 2))

;; A constant, but not a compile-time constant.
(load-time-value (string (gensym)) t)

;; A form with potentially valuable type information.
(load-time-value (make-array 5))

;; Dead code.
(when nil (load-time-value '(1 2 3)))

;; Dead code with side-effects.
(defvar *n*)
(when nil (load-time-value (incf *n*)))

;; Nested LOAD-TIME-VALUE forms.
(defvar *i* 0)
(load-time-value
(loop repeat 2 sum (load-time-value (incf *i*))))

;; Accidental modification of constant data. Users will appreciate compiler
;; warnings for such code.
(fill (load-time-value (list 5) t) 6)

;; Forms a compiler may want to coalesce.
'(1 2 3)
(load-time-value '(1 2 3))
(load-time-value (list 1 2 3) t)

;; Loading the following two functions from a single file that has been
;; processed by COMPILE-FILE results in implementation-dependent
;; behavior. The call to BAR at load time might precede its definition.
(defun bar () 42)
(defun foo () (load-time-value (bar)))
#+END_SRC

** Current Practice
It is instructive to see how LOAD-TIME-VALUE forms are handled elsewhere in
the Common Lisp community.
*** ANSI Test Suite
The ANSI test suite contains no dedicated tests for LOAD-TIME-VALUE forms.
It merely asserts that the corresponding symbol is bound to a special
operator in the Common Lisp package and that it receives either one or two
arguments.
*** SBCL
The SBCL implementation of LOAD-TIME-VALUE resides in
[[https://github.com/sbcl/sbcl/blob/master/src/compiler/ltv.lisp][src/compiler/ltv.lisp]], with some related code in [[https://github.com/sbcl/sbcl/blob/master/src/compiler/dump.lisp][src/compiler/dump.lisp]],
[[https://github.com/sbcl/sbcl/blob/master/src/compiler/dump.lisp][src/compiler/main.lisp]] and [[https://github.com/sbcl/sbcl/blob/master/src/compiler/generic/genesis.lisp][src/compiler/generic/genesis.lisp]].

When translating a LOAD-TIME-VALUE form from source code to IR1, SBCL
performs the following steps:
1. An approximate type of the run-time value of the LOAD-TIME-VALUE form is
derived.  In particular, SBCL extracts type information if the first
argument is a call to a function with type declarations, or a THE,
TRULY-THE or FUNCTION special form, or if the first argument form is a
variable with type declarations, or if it is a form that is CONSTANTP.
2. If the approximate type from the previous step is a subtype of CHARACTER
or NUMBER, the second argument form of the LOAD-TIME-VALUE form is
automatically converted to T.
3. The LOAD-TIME-VALUE form is converted to a lambda function, compiled,
and placed in the FASL file, such that it is evaluated at load-time. Its
occurrence is replaced with a new special operator %LOAD-TIME-VALUE,
that later references the vector of constants of this particular
component.
*** CCL
The CCL implementation of LOAD-TIME-VALUE resides in
[[https://github.com/Clozure/ccl/blob/master/compiler/nx1.lisp][compiler/nx1.lisp]]. Essentially, CCL replaces each (load-time-value form) it
encounters during COMPILE-FILE by `(#:load-time-eval '(funcall ,(compile
nil `(lambda () ,form)))).
*** ECL
The ECL handling of LOAD-TIME-VALUE happens in [[https://gitlab.com/embeddable-common-lisp/ecl/blob/develop/src/cmp/cmptop.lsp][src/cmp/cmptop.lisp]].  During
COMPILE-FILE, all occurring LOAD-TIME-VALUE forms are translated to ECL's
intermediate representation (c1form) and pushed to a special variable.

*** Cleavir (as of Q1 2018)
- The first argument of a LOAD-TIME-VALUE form is not processed further and
stored as an S-expression.
- An AST transformation hoists all LOAD-TIME-VALUE forms.  As a result,
these forms are never seen by subsequent transformations like HIR
transformation and optimization.  The hoisted expressions are later
passed as arguments to the current top-level function.  It is not clear
how this mechanism works in the case of nested LOAD-TIME-VALUE forms.
- All non-immediate constants are currently converted to LOAD-TIME-VALUE
forms.  This has the benefit that they are automatically hoisted during
FASL dumping, but prevents many optimizations.
** Discussion
*** From the Cleavir documentation (projects.txt):
#+BEGIN_QUOTE
I would like to experiment with doing certain transformations at
different times.  For example, right now, non-trivial constants are
turned into LOAD-TIME-VALUE forms when the AST is created.  I would
like to have the option of leaving constants in the AST and process
them at the HIR level, so that type inference, constant propagation,
value numbering, etc., can use the information in constants.  There
must then be a HIR transformation that takes remaining constants and
turn them into LOAD-TIME-VALUE calls.
#+END_QUOTE

*** From the #clasp IRC, 18.3.2018 12:54
#+BEGIN_QUOTE
heisig Hello beach, do you have a moment to talk about load-time-value forms?

heisig Just to check whether my thinking is correct.

beach  Sure.

heisig The current approach is to move each load-time-value for to a suitable top-level-enter-instruction.

beach  Yes, that's right.

beach  And it is done at the AST level.

heisig The downside is that this prevents optimization of that form.

heisig So no type information

heisig And it cannot be turned into a constant.

beach  Optimizing that form is probably not important, but the type information is lost so that other forms can not be optimized.

beach  And we can't do constant propagation.

heisig So the more sensible approach would be to recursively invoke a specialized, implementation dependent version of the compiler on each load-time-value form, turning it either into an immediate AST, or into a (truly-the (load-time-value FOO)) form.

beach  OK, slow down a bit... :)

beach  That is an orthogonal issue.

beach  In the file compiler, LOAD-TIME-VALUEs need to be broken down to something that the implementation can handle from a FASL file.

Bike   with the way hoisting works in sicl, it should turn (lambda () (load-time value ...)) into ((lambda (x) (lambda () x)) ...), so type inference ought to work normally on that

beach  Some implementations can handle fairly complex forms, whereas others, like SICL, can handle only very primitive ones.

beach  heisig: The first issue we need to deal with is to move the hoisting from the AST level to the HIR level.

heisig I already found some code for that in HIR-transformations/eliminate-load-time-values.lisp.

heisig That is why I am asking.

Bike   yeah, in clasp we actually kind of hoist twice now... bit silly

beach  Yes, I think it used to be done that way, but for some reason I changed it so that it is now done at the AST level.

heisig I think it makes sense to host twice.

Bike   i think it just had load time value instructions, though, which have forms

heisig *hoist

Bike   which is wrong

Bike   why twice?

heisig The first time, you hoist all load-time-value forms that are not constants.

heisig The second time, you hoist all constants that are not immediates.

beach  A LOAD-TIME-VALUE HIR instruction should probably not have a form in it, but an AST.

beach  I would say this: Keep constants as they are in the AST, and have a LOAD-TIME-VALUE-AST that has an AST in it.

beach  Then turn all that into HIR, probably keeping the AST in the LOAD-TIME-VALUE instruction.

beach  Then do optimizations including constant propagation.

beach  Finally, turn non-immediate constants into LOAD-TIME-VALUEs, hoist all that stuff, and apply the specialized compiler to the ASTs in the LOAD-TIME-VALUE instructions.

beach  But I am doing this from memory, so I might be wrong.

heisig That seems reasonable. But in my (limited) understanding, there is no flow of information from the outside world into the load-time-value form, so you can actually do all that processing as early as during the AST generation of the original form.

heisig But admittedly, this is a future issue.

beach  Except that constants might disappear or get introduced in the HIR step, so you would still have new LOAD-TIME-VALUE ASTs to process later.

beach  Imagine (let* ((x '(a b c)) (y (car x))) ...)

beach  It is entirely possible that some HIR transformation determines that the value of X is A, but that won't be obvious when the AST is created.

beach  That the value of Y is A. 

beach  Sorry.

Bike   what about (let* ((x '(#.(make-instance ...))) (y (car x))) ...)? to get the load form we'd need to call make-load-form, which needs an environment.

beach  I haven't thought about it.

heisig Bike: Good point.

beach  Bike: Are you saying we need to keep the environment after AST generation?

Bike   i'm saying we don't want to need that, so we should tread carefully, is all

beach  Yeah, I'll grant you that.

heisig I don't think so. This environment is just the lexical environment of the subform of the load-time-value.

heisig I guess.

Bike   lexical? don't need lexical stuff for load time values.

beach  It's the compilation global environment, right?

beach  global compilation environment

heisig CLHS make-load-form: 'Environment is an environment object corresponding to the lexical environment in which the forms will be processed.'

beach  Hmm, OK.

Bike   well, other thought, we shouldn't use make load form anyway

Bike   we should have our own function that the client can specialize

Bike   have it take a system argument maybe

Bike   e.g. so that it can cross compile

heisig It seems the conservative choice would be to apply, during AST creation, an implementation dependent compiler to the load-time-value form and either receive a constant, or a typed reference to some implementation dependent object...

beach  That object would be an AST, no?

heisig Not necessarily. I think Cleavir would never have to touch it again. It is just something used to emit the fasl later on. At least this is my thinking at the moment.

beach  heisig: But then you might do things twice, won't you?

beach  Like I said, at the HIR level, constants might be taken apart or created, and then you would have to do the entire thing over again.

heisig Hmm. Thinking...

beach  That is why I suggested leaving the ASTs in there, until (after HIR processing) it has been determined which constants remain, and which of those must be turned into LOAD-TIME-VALUEs.

heisig Ah, I see. You want to avoid creating load-time-values that are never used.

beach  Yes.

beach  And also leave the constants in there as long as possible so that HIR transformations can examine them.

heisig Ok, I think I finally understood the whole problem.

beach  Great!  Again, there might be something I haven't thought of.
#+END_QUOTE

** Proposal 2018-05-27
Change cst-to-ast, such that during compile-file, it automatically wraps
each top level form into the AST equivalent of a let* binding of all
occurring load-time-value forms.  This way, type inference and optimization
work automatically.  The load-time-value-ast node, the load-time-value hir
instruction, as well as the top-level-enter HIR instruction become
obsolete.

Introduce a HIR instruction, CONSTANTIZE, to declare that some AST used to
be the first argument of a LOAD-TIME-VALUE form with a second argument of
T.

Introduce a new compiler phase, where a list of top level HIR statements is
converted to a fasl-enter-instruction, a subclass of
enter-instruction. This instruction takes three arguments ---
copy-specialized-array, intern and fdefinition. Non-immediate constants are
hoisted in this process, possibly resulting in calls to MAKE-LOAD-FORM and
further compilation.

*** Example:
The compile-file HIR equivalent of

#+BEGIN_SRC lisp
(defun f () '#1=("x" #1#))
(defun g () (load-time-value (f)))
#+END_SRC

is turned into the HIR equivalent of

#+BEGIN_SRC lisp
(lambda (copy intern fdefinition)
  (let (;; create constants
        (c0 (funcall copy "COMMON-LISP"))
        (c1 (funcall copy "SETF"))
        (c1 (funcall copy "FDEFINITION"))
        (c2 (funcall copy "F"))
        (c3 (funcall copy "G"))
        (c4 (funcall copy "x"))
        (c5 (cons nil nil)))
    ;; initialize constants
    (rplaca c5 c4)
    (rplacd c5 c5)
    ;; First top level form: (defun f () '#1=("x" #1#))
    (let* (;; Evaluate LOAD-TIME-VALUE forms
           (ltv0 (funcall intern c1 c0)) ; CL:SETF
           (ltv1 (funcall intern c2 c0)) ; CL:FDEFINITION
           (ltv2 (list ltv0 ltv1)) ; '(CL:SETF CL:FDEFINITION)
           (ltv3 (funcall fdefinition ltv2)); #'(CL:SETF CL:FDEFINITION)
           (ltv4 (funcall intern c2))) ; F
      (funcall ltv3 (lambda () c5) ltv4))
    ;; Second top level form: (defun g () (load-time-value (f)))
    (let* (;; Evaluate LOAD-TIME-VALUE forms
           (ltv0 (funcall intern c1 c0)) ; CL:SETF
           (ltv1 (funcall intern c2 c0)) ; CL:FDEFINITION
           (ltv2 (list ltv0 ltv1)) ; '(CL:SETF CL:FDEFINITION)
           (ltv3 (funcall fdefinition ltv2)); #'(CL:SETF CL:FDEFINITION)
           (ltv4 (funcall intern c3)) ; 'G
           (ltv5 (funcall intern c2)) ; 'F
           (ltv6 (funcall ltv5)))
      (funcall ltv3 (lambda () ltv6) ltv4))))
#+END_SRC

which could be simplified by further optimization stages to

#+BEGIN_SRC lisp
(lambda (copy intern fdefinition)
  (let (;; create constants
        (c0 (funcall copy "COMMON-LISP"))
        (c1 (funcall copy "SETF"))
        (c1 (funcall copy "FDEFINITION"))
        (c2 (funcall copy "F"))
        (c3 (funcall copy "G"))
        (c4 (funcall copy "x"))
        (c5 (cons nil nil)))
    ;; initialize constants
    (rplaca c5 c4)
    (rplacd c5 c5)
    (let* ((t0 (funcall intern c1 c0)) ; CL:SETF
           (t1 (funcall intern c2 c0)) ; CL:FDEFINITION
           (t2 (list t0 t1)) ; '(CL:SETF CL:FDEFINITION)
           (t3 (funcall fdefinition t2)) ; #'(CL:SETF CL:FDEFINITION)
           (t4 (funcall intern c2))) ; 'F
      ;; First top level form: (defun f () '#1=("x" #1#))
      (funcall t3 (lambda () c5) t4)
      ;; Second top level form: (defun g () (load-time-value (f)))
      (let* ((ltv0 (funcall intern c3)) ; 'G
             (ltv1 (funcall t4))) ; (funcall 'F)
        (funcall t3 (lambda () ltv1) ltv0)))))
#+END_SRC

** Miscellaneous Ideas
*** Constantness Inference
It seems worthwhile to track the knowledge about constantness of objects
during compilation, e.g., to warn the programmer of accidental mutation.
This would be an extension of type inference.

*** Uniquification of Constants
Constant objects, i.e., objects whose mutation results in undefined
behavior, qualify for uniquification.  In the most extreme case, an
implementation could use hash-consing to ensure that similar immutable
objects are always identical.  The benefits would be a decreased memory
footprint and some potential for some optimization, e.g., the
simplification of an EQUALP test with two constant operands to an EQ test.
