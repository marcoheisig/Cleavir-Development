#+TITLE: The treatment of =load-time-value= forms in Cleavir

* Introduction
The =load-time-value= special form has been added to Common Lisp in 1989 as a
replacement of the dysfunctional sharpsign comma reader macro.  The history
and semantics of the form are described in the following sections of the
Hyperspec:
- [[http://www.lispworks.com/documentation/HyperSpec/Body/s_ld_tim.htm]]
- [[http://www.lispworks.com/documentation/HyperSpec/Body/03_bbb.htm]]
- http://www.lispworks.com/documentation/HyperSpec/Issues/iss216_w.htm

For the remaining discussion, we will always assume the =load-time-value=
form is processed by the file compiler.  The other modes of processing ---
EVAL and COMPILE --- are trivially handled by evaluating the form directly
in a null lexical environment and replacing its use with the resulting
value.

Several challenges arise for a compiler writer when dealing with
=load-time-value= forms:
1. The value of the =load-time-value= form may be a constant, either because
   its second argument is the symbol T, or because the first argument is a
   literal.
2. Even if the first argument of a =load-time-value= form is not a literal,
   it might evaluate to a constant in the sense of CONSTANTP.
3. Even if the first argument of a =load-time-value= does not evaluate to a
   constant, the compiler may be able to derive some information about the
   resulting value.  This can be type information, or the knowledge that
   the value satisfies a particular test.
4. A =load-time-value= form may appear in dead code. In this case there is no
   need to store the form in the FASL at all.
5. Several =load-time-value= forms may be nested.  In this case, the standard
   mandates that each form is nevertheless only evaluated once.
6. Accidental modification of literal constants is a dangerous source of
   bugs.  A good compiler should attempt to detect and report such code and
   consequently needs to know about the intricacies of =load-time-value=
   forms.
7. Several constant =load-time-value= forms that evaluate to the same
   constant datum may be coalesced. Some heuristic must be used to detect
   such equivalent forms, e.g. if they are the same under EQUAL.

The following examples illustrate these issues:
#+BEGIN_SRC lisp
;; Obvious constants.
(load-time-value (string (gensym)) t)
(load-time-value "abc")

;; A hidden constant.
(load-time-value (1+ 2))

;; A form with potentially valuable type information.
(load-time-value (make-array 5))

;; Dead code.
(when nil (load-time-value '(1 2 3)))

;; Nested forms.
(defvar *i* 0)
(load-time-valuAe
 (loop repeat 2 sum (load-time-value (incf *i*))))

;; Accidental modification of constant data.
(fill (load-time-value (list 5) t) 6)

;; Forms a compiler might coalesce.
'(1 2 3)
(load-time-value '(1 2 3))
(load-time-value (list 1 2 3) t)
#+END_SRC
* Current Practice
It is instructive to see how other Common Lisp compilers handle
=load-time-value= forms.
** SBCL
** CCL
** ECL
** ABCL
* A Proposed Solution
